// https://leetcode.com/problems/edit-distance/

Recursive code -
// TC - O(3^(m+n))
// SC - O(m+n)

public static int editDistance(String str1, String str2, int m, int n){
        // Base cases
        if (m == 0) return n; // Insert all characters of str2
        if (n == 0) return m; // Delete all characters of str1

        // If last characters are the same, move to next
        if (str1.charAt(m - 1) == str2.charAt(n - 1)) {
            return editDistance(str1, str2, m - 1, n - 1);
        }

        // If last characters are different, consider all three operations
        int insert = editDistance(str1, str2, m, n - 1); // Insert
        int delete = editDistance(str1, str2, m - 1, n); // Delete
        int replace = editDistance(str1, str2, m - 1, n - 1); // Replace

        // Return minimum of all three operations plus one for the current operation
        return 1 + Math.min(insert, Math.min(delete, replace));
    }
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        return editDistance(word1, word2, m, n);
    }
