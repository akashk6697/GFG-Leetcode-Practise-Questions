// https://leetcode.com/problems/coin-change/submissions/

// Recursive code -

TC - O(coins.length^amount)
SC- O(amount) - bcoz of recursive stack
private static int minCoins(int i, int[] coins, int amount){
        // no coins needed
        if(amount == 0) return 0;
        
        if(amount < 0 || i == coins.length) return 100000; // as amount can't be negative so return very big number
        
        // take 
        int take = 1 + minCoins(i, coins, amount-coins[i]);
        
        // not take
        int notTake = minCoins(i+1, coins, amount);
        
        return Math.min(take, notTake);
    }
    public int coinChange(int[] coins, int amount) {
        int result = minCoins(0, coins, amount);
        return result >= 100000 ? -1 : result;
    }

// Memoization code
// TC - O(coins.len * amount)
// SC - O(amount)
private static int minCoins(int i, int[] coins, int amount, int dp[][]){
        // no coins needed
        if(amount == 0) return 0;
        
        if(amount < 0 || i == coins.length) return 100000;
        
        // already calculated
        if(dp[i][amount] != -1) return dp[i][amount];
        
        // take 
        int take = 1 + minCoins(i, coins, amount-coins[i], dp);
        
        // not take
        int notTake = minCoins(i+1, coins, amount, dp);
        
        return dp[i][amount] = Math.min(take, notTake);
    }
    public int coinChange(int[] coins, int amount) {
        int dp[][] = new int[coins.length+1][amount+1];
        
        for(int[] i : dp){
            Arrays.fill(i,-1);
        }
        
        int result = minCoins(0, coins, amount, dp);
        return result >= 100000 ? -1 : result;
    }
