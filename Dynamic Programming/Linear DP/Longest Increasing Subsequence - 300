// https://leetcode.com/problems/longest-increasing-subsequence/

Recursion -

public static int solve(int[] nums,int i, int prev){
        int n = nums.length;

        //index out of bound
        if(i >= n){
            return 0;
        }
        int take = 0;
        int skip = 0;
        //take
        if(prev == -1 || nums[prev] < nums[i]){
            take = 1 + solve(nums,i+1,i); // i will become prev here as we have picked here curr element
        }
        //skip
        skip = solve(nums, i+1, prev); // prev will remain prev here

        return Math.max(take, skip);
    }
    
    public int lengthOfLIS(int[] nums) {
        return solve(nums, 0, -1);
    }

Memoization -
public static int solveMemo(int[] nums,int i, int prev, int[][] dp){
        int n = nums.length;

        //index out of bound
        if(i >= n){
            return 0;
        }

        // offset for 'prev' because it can be -1
        int prevIndex = prev + 1;

        //already calculated
        if(dp[i][prevIndex] != -1){
            return dp[i][prevIndex];
        }

        int take = 0;

        //take
        if(prev == -1 || nums[prev] < nums[i]){
            take = 1 + solveMemo(nums,i+1,i,dp); // i will become prev here as we have picked here curr element
        }
        //skip
        int skip = solveMemo(nums, i+1, prev,dp); // prev will remain prev here

        return  dp[i][prevIndex] = Math.max(take, skip);
    }
    public static int  lengthOfLIS(int[] nums){
        int n = nums.length;
        int[][] dp = new int[n][n+1];
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }
        return solveMemo(nums,0,-1, dp);
    }

Bottom Up - 

public static int solveBottomUp(int[] nums){
        int n = nums.length;
        
        if(n == 0) return 0;
        
        int[] dp = new int[n];
        Arrays.fill(dp,1);
        
        int maxLength = 1;
        
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i], dp[j]+1);
                }
            }
            maxLength = Math.max(maxLength, dp[i]);
        }
        return maxLength;
    }
    public int lengthOfLIS(int[] nums) {
        return solveBottomUp(nums);
    }
