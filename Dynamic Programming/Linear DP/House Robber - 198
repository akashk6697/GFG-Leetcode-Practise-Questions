// https://leetcode.com/problems/house-robber/

Recursive Code : TLE
TC - O(n^2) due to recursive calls
SC - O(n) due to recursion
private int Robbery(int index, int[] nums){
        if(index == 0) return nums[0];
        if(index == 1) return Math.max(nums[0], nums[1]);
        
        return Math.max(nums[index] + Robbery(index-2, nums), Robbery(index-1, nums));
    }
    public int rob(int[] nums) {
        int n = nums.length;
        return Robbery(n-1, nums);
    }

Dynamic Programming Code : 
Top Down
TC - O(n)
SC - O(n) + O(n), [recursion + dp array]
private int Robbery(int index, int[] nums, int[] dp){
        if(index == 0) return nums[0];
        if(index == 1) return Math.max(nums[0], nums[1]);
        if(dp[index] != -1) return dp[index];
        return dp[index] =  Math.max(nums[index] + Robbery(index-2, nums, dp), Robbery(index-1, nums,dp));
    }
    public int rob(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return Robbery(n-1, nums, dp);
    }


Bottom Up
TC - O(n)
SC - O(n)
public int rob(int[] nums) {
        int n = nums.length;
        if(n == 0) return 0;
        if(n == 1) return nums[0];
        
        int[] dp = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        for(int i=2; i<n; i++){
            dp[i] = Math.max(nums[i] + dp[i-2], dp[i-1]);
        }
        return dp[n-1];
    }

Space Optimized
TC - O(n)
SC - O(1)
public int rob(int[] nums) {
        int n = nums.length;
        if(n == 0) return 0; // edge case for an empty array
        if(n == 1) return nums[0]; // edge case for a one element
        
        
        int prev2 = nums[0];
        int prev = Math.max(nums[0], nums[1]);
        
        for(int i=2; i<n; i++){
            int curr = Math.max(nums[i] + prev2, prev);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
