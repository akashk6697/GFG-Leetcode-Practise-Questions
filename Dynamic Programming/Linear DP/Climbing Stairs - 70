// https://leetcode.com/problems/climbing-stairs/

// Recursive Code :
private int recur(int i, int n){
        if(i == n) return 1;
        
        if(i > n) return 0;
        
        return recur(i+1,n) + recur(i+2,n);
    }
    public int climbStairs(int n) {
        return recur(0,n);
    }

// Memoization or Top Down 
TC - O(n)
SC - O(n) + O(n) = O(2n) = O(n)
    //recursive + dp

private int memo(int i, int n, int[] dp){
        if(i == n) return 1;
        
        if(i > n) return 0;
        
        // already calculated // i is changing
        if(dp[i] != -1) {
            return dp[i];
        }
        //remember
        return dp[i] =  memo(i+1, n, dp) + memo(i+2, n, dp);
    }
    
    public int climbStairs(int n) {
        int [] dp = new int[n+2];
        
        for(int i=0; i<=n; i++){
            dp[i] = -1;
        }
        return memo(0,n, dp);
    }


Bottom-up Iterative solution: 
// TC -> O(N)
// SC -> O(1)
1.Initialize base cases (prev = 1, prev2 = 1) to represent the number of ways to climb 1 and 2 stairs respectively.
2.Iterate from 2 to n, calculating the number of ways to climb each stair iteratively.
3.Update the previous values (prev and prev2) in each iteration.
4.Return the final result, which is the number of ways to climb n stairs (prev).

class Solution {
    public int climbStairs(int n) {
        // prev1 and prev2 will handle base case
        int prev1 = 1;
        int prev2 = 0;
        int curr = 0;
        for(int i=n-1; i>= 0; i--){
           curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }
