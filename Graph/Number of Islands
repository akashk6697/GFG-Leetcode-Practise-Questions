// https://leetcode.com/problems/number-of-islands/
// https://www.geeksforgeeks.org/problems/find-the-number-of-islands/1
// TC - O(m*n)
// SC - O(min(m,n) 

//bfs 
public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int numIslands = 0;
        int rows = grid.length;
        int cols = grid[0].length;

         // 8 directions: up, down, left, right, and the 4 diagonals
        // int[] rowDir = {-1, 1, 0, 0, -1, -1, 1, 1};
        // int[] colDir = {0, 0, -1, 1, -1, 1, -1, 1};
         int[] rowDir = {-1, 1, 0, 0};
         int[] colDir = {0, 0, -1, 1};

        // Traverse the grid
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    numIslands++;  // Found a new island

                    // Perform BFS to mark the entire island
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{i, j});
                    grid[i][j] = '0';  // Mark as visited

                    while (!queue.isEmpty()) {
                        int[] current = queue.poll();
                        int currRow = current[0];
                        int currCol = current[1];

                        // Explore all 4 possible directions
                        for (int d = 0; d < 4; d++) {
                            int newRow = currRow + rowDir[d];
                            int newCol = currCol + colDir[d];

                            // Check if the new position is valid and is land ('1')
                            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == '1') {
                                queue.offer(new int[]{newRow, newCol});
                                grid[newRow][newCol] = '0';  // Mark as visited
                            }
                        }
                    }
                }
            }
        }

        return numIslands;
}
