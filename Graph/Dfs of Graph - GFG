// https://www.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1
// TC - O(V+E)
// SC - O(V+E)

public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> dfsResult = new ArrayList<>();
        boolean[] visited = new boolean[V]; // To keep track of visited vertices
        
        // Call the recursive function to start DFS from vertex 0
        dfs(0, adj, visited, dfsResult);
        
        return dfsResult;
    }

    // Recursive DFS function
    private void dfs(int vertex, ArrayList<ArrayList<Integer>> adj, boolean[] visited, ArrayList<Integer> dfsResult) {
        // Mark the current node as visited and add it to the result
        visited[vertex] = true;
        dfsResult.add(vertex);
        
        // Traverse all the adjacent vertices
        for (Integer neighbor : adj.get(vertex)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, dfsResult);
            }
        }
    
    }
