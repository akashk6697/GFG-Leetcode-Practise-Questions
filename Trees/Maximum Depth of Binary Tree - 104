// https://leetcode.com/problems/maximum-depth-of-binary-tree/
// TC -> O(N) for traversing each node
// SC -> O(H), for recursion call stack, in worst case when its Skew tree it will be O(n)

Approach - using recurrence - 1 + max(leftHeight,rightHeight) 
// from root node get height of left subtree , get height of right subtree and in the end add root node as well. (recursively)

class Solution {
   public int maxDepth(TreeNode root) {
        if(root == null) return 0; // base case , agr root he null hai to height hogi he nhi

        int leftHeight = maxDepth(root.left);
        int rightHeight = maxDepth(root.right);
        
        return 1 + Math.max(leftHeight,rightHeight);
    }
}
