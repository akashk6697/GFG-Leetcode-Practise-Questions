// https://leetcode.com/problems/maximum-depth-of-binary-tree/
// TC -> O(N) for traversing each node
// SC -> O(H), for recursion call stack

Idea - by solving two sub problems, by finding maximum depth of left & right subtree. If we know the maximum depth of left & right subtree then maximum depth of entire tree will be 
1 + (maximum depth of left subtree, maximum depth of right subtree).

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        if(root.left == null){
            return 1 + maxDepth(root.right);
        }
        
        if(root.right == null){
            return 1 + maxDepth(root.left);
        }
        
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}
