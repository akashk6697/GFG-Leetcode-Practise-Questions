// https://www.geeksforgeeks.org/problems/burning-tree/1
// TC - O(n)
// SC - O(n) in worst case if tree is skewed tree

   // Find the target node and return it
static Node find(Node root, int target) {
    if (root == null) return null;

    if (root.data == target) return root;

    Node left = find(root.left, target);
    if (left != null) return left;

    return find(root.right, target);
}

// Calculate the height of the tree from a node
static int Height(Node root) {
    if (root == null) return 0;
    return 1 + Math.max(Height(root.left), Height(root.right));
}

// Calculate the burn time and return it
static int Burn(Node root, int[] timer, int target) {
    if (root == null) return 0;

    if (root.data == target) return -1;

    int left = Burn(root.left, timer, target);
    int right = Burn(root.right, timer, target);

    if (left < 0) {
        timer[0] = Math.max(timer[0], Math.abs(left) + right);
        return left - 1;
    }

    if (right < 0) {
        timer[0] = Math.max(timer[0], left + Math.abs(right));
        return right - 1;
    }

    return 1 + Math.max(left, right);
}

// Calculate the minimum time to burn the tree
public static int minTime(Node root, int target) {
    int[] timer = {0};  // array to pass the timer by reference
    Burn(root, timer, target);

    Node BurnNode = find(root, target); // Find the target node
    int high = Height(BurnNode) - 1;    // Calculate the height of the burning node's subtree

    return Math.max(timer[0], high);
}
