// https://leetcode.com/problems/binary-tree-level-order-traversal/
// TC -> O(N)
// SC -> O(N)



class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // list to store result
        List<List<Integer>>  result = new ArrayList<>();
        // if root is null, return empty list
        if(root == null){
            return result;
        }
        // queue for level order traversal
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root); // add root to queue

        // traverse untill queue is not empty
        while (!queue.isEmpty()){
            // list to store values of nodes at current level
            ArrayList<Integer> level = new ArrayList<>();
            int size = queue.size(); // get no of nodes at current level
            // traverse at current level nodes
            for (int i = 0; i < size; i++){
                TreeNode head = queue.poll(); // remove head node from queue
                level.add(head.val); // add value of head node to level list

               // Add the left child of the head node to the queue if it exists
                if(head.left != null){
                    queue.offer(head.left);
                }
                // Add the right child of the head node to the queue if it exists
                if(head.right != null){
                    queue.offer(head.right);
                }
            }
            result.add(level); // add curr level list to result
        }
        return result;
    }
}
