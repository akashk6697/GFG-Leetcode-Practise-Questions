// https://leetcode.com/problems/same-tree/
// TC -> O(N) , n is no of nodes
// SC -> O(N) , since the recursive calls would occur in a linear fashion, leading to a call stack size equal to the number of nodes in the tree.

DFS Solution : Recursive

class Solution {
    public boolean isSameTree(TreeNode root1, TreeNode root2) {
        
        // if both trees are null, it means both are same return true
        if(root1 == null && root2 == null){
            return true;
        }
        
        //if 1 of them is null , means not same, return false
        if(root1 == null || root2 == null){
            return false;
        }
        
        // both trees should be same structure wise & value wise, if not return false
        if(root1.val != root2.val){
            return false;
        }
        
        //if above all conditions satisy then check left & right of both tree recursively
        return (isSameTree(root1.left,root2.left) && isSameTree(root1.right,root2.right));
    }
}



BFS Solution :
// TC -> O(N) , n is no of nodes
// SC -> O(N) , because of queues

public boolean isSameTree(TreeNode root1, TreeNode root2) {
        
    // If both trees are null, it means both are the same; return true
    if(root1 == null && root2 == null){
        return true;
    }
    
    // If one of them is null, it means they are not the same; return false
    if(root1 == null || root2 == null){
        return false;
    }
    
    // queues for level order traversal of both trees
    Queue<TreeNode> queue1 = new LinkedList<>();
    Queue<TreeNode> queue2 = new LinkedList<>();
    queue1.offer(root1);
    queue2.offer(root2);
    
    // Perform level order traversal simultaneously on both trees
    while(!queue1.isEmpty() && !queue2.isEmpty()){
        // Dequeue nodes from both queues
        TreeNode node1 = queue1.poll();
        TreeNode node2 = queue2.poll();
        
        // If values of corresponding nodes are not equal, trees are not the same
        if(node1.val != node2.val){
            return false;
        }
        
        // Check left children of both nodes
        if(node1.left != null && node2.left!= null){
            // If both left children exist, enqueue them
            queue1.offer(node1.left);
            queue2.offer(node2.left);
        }
        else if (node1.left != null || node2.left!= null){
            // If only one of the left children exists, trees are not the same
            return false;
        }
        
        // Check right children of both nodes
        if(node1.right != null && node2.right!= null){
            // If both right children exist, enqueue them
            queue1.offer(node1.right);
            queue2.offer(node2.right);
        }
        else if (node1.right != null || node2.right!= null){
            // If only one of the right children exists, trees are not the same
            return false;
        }
    }
    
    // If traversal completes without finding any differences, trees are the same
    return true;
}
