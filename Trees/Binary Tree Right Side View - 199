// https://leetcode.com/problems/binary-tree-right-side-view/
// TC -> O(N)
// SC -> O(N)

Approach - BFS

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List result = new ArrayList<>();
        if(root == null){
            return result;
        }
        
        // Queue for level order travsersal
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while(!queue.isEmpty()){
            //list to store current level nodes
            ArrayList<Integer>currLevel = new ArrayList<>();
            int size = queue.size();
            TreeNode rightMost = null;
            
            for(int i =0; i < size; i++){
                TreeNode head = queue.poll();
                rightMost = head;
                currLevel.add(head.val);
                
                //add left child of head node
                if(head.left != null){
                    queue.offer(head.left);
                }
                //add right child of head node
                if(head.right != null){
                    queue.offer(head.right);
                }
            }
            // Add the rightmost node to the result after processing each level
            result.add(rightMost.val);
        }
        return result;
    }
}

