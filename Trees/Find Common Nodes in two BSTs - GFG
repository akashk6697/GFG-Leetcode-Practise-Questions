// https://www.geeksforgeeks.org/problems/print-common-nodes-in-bst/0

    /*
    TC - O(m+n) , SC - O(m+n)
    Approach -
    1. Apply inorder traversal on both trees and store their result in array/lists.
    2. find common nodes in result lists. (used two pointers to find common nodes)
     */


    private static void inorderTraversal(Node root,ArrayList<Integer> result){
        if(root != null){
            inorderTraversal(root.left,result);
            result.add(root.value);
            inorderTraversal(root.right,result);
        }
    }
    public static ArrayList<Integer> findCommon(Node root1,Node root2)
    {
        ArrayList<Integer> list1 = new ArrayList<>();
        ArrayList<Integer> list2 = new ArrayList<>();

        //perform inorder on both BST
        inorderTraversal(root1,list1);
        inorderTraversal(root2,list2);

        //now find common elements in those two lists
        ArrayList<Integer> commonNodes = new ArrayList<>();
        int i = 0, j= 0;

        //two pointers two find common nodes
        while (i < list1.size() && j < list2.size()){
            if(list1.get(i).equals(list2.get(j))){
                commonNodes.add(list1.get(i));
                i++;
                j++;
            }
            else if(list1.get(i) < list2.get(j)){
                i++;
            }
            else {
                j++;
            }
        }
        return commonNodes;
    }
