// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
// TC -> O(N)
// SC -> O(N)

Approach - BFS

class Solution {
   
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        // List to store the Zigzag Level Order traversal
        List<List<Integer>> zigzag = new ArrayList<>();
        
        // If the root is null, return an empty list
        if(root == null){
            return zigzag;
        }

        // Queue to perform level order traversal
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        // Flag to determine the direction of traversal
        boolean flag = false;

        // Iterate until the queue is empty
        while (!queue.isEmpty()){
            int n = queue.size();

            // List to store values of the current level
            List<Integer> level = new ArrayList<>();
            
            // Stack to store values for reverse traversal
            Stack<Integer> reverseStack = new Stack<>();

            // Iterate through all nodes of the current level
            for(int i = 0; i < n; i++){
                TreeNode node = queue.poll();

                // Check the flag for direction of traversal
                if(flag == true ){
                    reverseStack.add(node.val);
                }
                else {
                    level.add(node.val);
                }
                
                // Add child nodes to the queue
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);
            }
            flag = !flag;

            // Pop all elements from the stack and add to the level list
            while (!reverseStack.isEmpty()){
                level.add(reverseStack.pop());
            }
            
            // Add the current level to the Zigzag list
            zigzag.add(level);
        }
        // Return the Zigzag Level Order traversal list
        return zigzag;
    }
}
