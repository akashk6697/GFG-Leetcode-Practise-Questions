// https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/
Approach - 
1. Find mid of the linked list, mid will be root of tree.
2. Recursively build the left subtree (use left half of linked list).
3. Recursively build the right subtree (use right half of linked list).

TC - O(nlogn)
SC - O(log n) , bcoz of depth of recursive tree.

 // Helper function to find the middle of the linked list
    public ListNode findMiddle(ListNode head) {
        // Initialize slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;
        
        while (fast != null && fast.next != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // Disconnect the left half from the middle
        if (prev != null) {
            prev.next = null;
        }
        
        return slow;
    }

    // Recursive function to convert sorted linked list to balanced BST
    public TreeNode sortedListToBST(ListNode head) {
        // Base case: if head is null, return null
        if (head == null) {
            return null;
        }
        
        // Find the middle of the linked list
        ListNode mid = findMiddle(head);
        
        // The middle element becomes the root
        TreeNode node = new TreeNode(mid.val);
        
        // Base case when there is just one element in the linked list
        if (head == mid) {
            return node;
        }
        
        // Recursively construct the left subtree and right subtree
        node.left = sortedListToBST(head);
        node.right = sortedListToBST(mid.next);
        
        return node;
    }


// Optimized Approach -
1. Convert the Linked List to an Array.
2. Apply binary search on array to construct balance BST.
   - Recursively build the left subtree with the subarray before the middle index.
   - Recursively build the right subtree with the subarray after the middle index.

TC - O(n)
SC - O(n)

// Function to build a BST from a sorted list
    public TreeNode BuildBST(List<Integer> treelist, int start, int end) {
        // Base case - if start index is greater than end index, return null
        if (start > end) return null;

        // Find the middle element to make it root
        int mid = start + (end - start + 1) / 2;
        // Create the root node with the middle element
        TreeNode root = new TreeNode(treelist.get(mid));
        // Recursively build the left subtree
        root.left = BuildBST(treelist, start, mid - 1);
        // Recursively build the right subtree
        root.right = BuildBST(treelist, mid + 1, end);

        // Return the root node of the subtree
        return root;
    }

    // Function to convert a sorted linked list to a height-balanced BST
    public TreeNode sortedListToBST(ListNode head) {
        // Convert the linked list to an array
        List<Integer> treelist = new ArrayList<>();
        // Traverse the linked list and add each value to the array
        while (head != null) {
            treelist.add(head.val);
            head = head.next;
        }

        // Build the BST from the sorted array and return the root
        return BuildBST(treelist, 0, treelist.size() - 1);
    }
