// https://leetcode.com/problems/set-matrix-zeroes/

//brute force approach
    // 1. create matrix2 of same size or original and copy all elements to matrix2
    // 2. start traversing over original matrix whenever encounter 0 mark entire row and colum as 0 in matrix2
    // 3. now copy elements of matrix2 to original matrix
    // tc - O(m*n)
    // sc - O(m*n)

    public void setZeroes(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] temp = new int[rows][cols];
        
        //copy the original matrix to temp matrix
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                temp[i][j] = matrix[i][j];
            }
        }
        
        //traverse the original matrix and whenever found the 0 in original matrix
        // mark the corresponding row and col as zeros in temp matrix
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(matrix[i][j] == 0){
                    for(int k=0; k<cols; k++){
                        temp[i][k] = 0;
                    }
                    for(int k=0; k<rows; k++){
                        temp[k][j] = 0;
                    }
                }
            }
        }
        
        //now copy back temp to orginal matrix
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                 matrix[i][j] = temp[i][j];
            }
        }
    }

//better approach
    // 1. take two seperate boolean arrays to keep track of which row and col need to be set as zero.
    // 2. now travers over original matrix and identify which row and col need to set as zero, if found zero mark row and col as true
    // 3. as identified now set entire row to zero and col to zero
    // tc - O(m*n)
    // sc - O(m+n)

    public void setZeroes(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        boolean[] row = new boolean[rows];
        boolean[] col = new boolean[cols];
        
        //traverse over original matrix, whenever we found 0, mark the row and col as true
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(matrix[i][j] == 0){
                    row[i] = true;
                    col[j] = true;
                }
            }
        }
        
        //now set the row to zero
        for(int i=0; i<rows; i++){
            if(row[i]){
                for(int j=0; j<cols; j++){
                    matrix[i][j] = 0;
                }
            }
        }
        
        //now set the col to zero
        for(int j=0; j< cols; j++){
            if(col[j]){
                for(int i=0; i<rows; i++){
                    matrix[i][j] = 0;
                }
            }
        }
    }
