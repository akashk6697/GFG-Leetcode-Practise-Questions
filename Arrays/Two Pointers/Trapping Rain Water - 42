// https://leetcode.com/problems/trapping-rain-water/
//Brute Force - 
//tc - O(n^2)
//sc - O(1)
    // 1. Iterate through each element of array & calculate maxHeight to left of current index i
    // 2. calculate maxHeight to right of current index i
    // 3. storedWater = min of (leftmax , rightmax) - height[i] if its positive, otherwise 0
    // 4. sum up the stored water for all indices to get the total storedWater.

    public int trap(int[] height) {
        int n = height.length;
        int totalStoredWater = 0;

        //iterate through each index of height array
        for(int i=0; i<n; i++){
            int leftMax = 0;
            int rightMax = 0;

            //get maxHeight to left of current index
            for(int j=0; j<= i; j++){
                leftMax = Math.max(leftMax,height[j]); // update leftMax
            }

            //get maxHeight to right of current index
            for(int k=i; k<n; k++){
                rightMax = Math.max(rightMax,height[k]); // update rightMax
            }

            // Calculate the stored water at the current bar
            int storedWaterAtI  = Math.min(leftMax,rightMax) - height[i];

            // If storedWaterAtI is positive, add it to totalStoredWater
            if(storedWaterAtI > 0){
                totalStoredWater += storedWaterAtI;
            }
        }
        return totalStoredWater;
    }


//better approach
    // tc - O(n) , sc - O(n)
    // 1. Use two arrays to store the maximum heights to the left  and right of each bar
    // 2. Iterate over the height array to fill these two arrays
    // 3. use these arrays to calculate the trapped water at each bar and sum it up
    public int betterApproachTrappingRain(int[] height){
        int n = height.length;
        // Initialize two arrays to store the maximum heights to the left and right of each bar
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = 0; // initialize 0th index as 0
        // Fill the leftMax array
        for (int i=1; i<n;i++){
            leftMax[i] = Math.max(leftMax[i-1],height[i-1]);// leftMax[i] is the maximum height to the left of index i
        }

        rightMax[n-1] = 0; // initialize last index as 0
        // Fill the rightMax array
        for (int j = n-2; j>=0; j--){
            rightMax[j] = Math.max(rightMax[j+1],height[j+1]); // rightMax[j] is the maximum height to the right of index j
        }

        int water = 0;
        // Calculate the trapped water for each bar
        for(int i=0; i<n; i++){
            // The minimum height between leftMax and rightMax at index i determines the water level
            int minHeight = Math.min(leftMax[i],rightMax[i]);

            // If the water level is higher than the height of the current bar
            if(minHeight - height[i] >= 0){
                // Add the trapped water at index i to the total water
                water += minHeight - height[i];
            }
        }
        return water;
    }


//Optimal approach
//tc - O(n)
//sc - O(1)
    // 1. Sabse pehle findout karlo ki maximum height wali building konsi hai
    // 2. and then left max ke left side me start se traverse karte hue calculate karlo and check karlo kitna pani store hua hai ,agar negative hai to store nhi karo
    // 3. or fir same right side se check kralo max building tk ki kitna pani store hua hai, agar negative hai to store nhi karo
    // 4. last me total water return kardo
    public int optimalApproach(int[] height){
        int n = height.length;

        int leftMax = 0; // will store max height encountered in left side
        int rightMax = 0; // will store max height encountered in right side
        int water = 0;
        int index = 0; // Index of the maximum height
        int maxHeight = height[0]; // Initially we will be considering the maximum height as the first element

        // maximum height wali building konsi hai vo find karlo or uska index
        for(int i = 1; i<n; i++){
            if(height[i] > maxHeight){
                maxHeight = height[i];
                index = i;
            }
        }

        //left side me kitna pani store hua hai vo calculate karlo
        for (int i=0; i<index; i++){
            if(leftMax > height[i]){
                water += leftMax - height[i]; // leftmax - currheight[i] ko water me store karva do
            }
            else {
                leftMax = height[i];// leftMax ko current height se update kardo
            }
        }

        //right side me kitna pani store hua hai vo calculate karlo
        for(int i = n-1; i > index ; i--){
            if(rightMax > height[i]){
                water += rightMax - height[i];// Water trapped between rightMax and current height
            }
            else {
                rightMax = height[i];// rightMax ko current height se update kardo
            }
        }

        return water;

    }
