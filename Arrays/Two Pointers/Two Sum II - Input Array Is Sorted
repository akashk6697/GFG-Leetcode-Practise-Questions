// https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

//brute force approach - 2 loop laga ke check karlo agr arr[i] + arr[j] == target hai to unka index return kardo
//tc - O(n^2)
//sc - O(1)
public class TwoSum {
    public int[] twoSum(int[] numbers, int target){
        for(int i=0; i< numbers.length-1; i++){
            for(int j=1; j< numbers.length; j++){
                if(numbers[i] + numbers[j] == target){
                    return new int[]{i+1,j+1};
                }
            }
        }
        return new int[] {-1,-1};
    }
}

 // better approach - binary search - pehle to x nikal lo target - arr[i] se and jaisa ki array sorted hai to yadi x, i+1 se arr.length-1
    // ki range me mil jaye to return kardo uska index and i index, else return kardo {-1,-1}.
    //tc- O(nlogn)
    //sc - O(1)

    public int[] twoSumBinarySearch(int[] numbers, int target){
        for(int i =0; i< numbers.length; i++){
            int x = target - numbers[i];

            int start = i+1; // i+1 se end ke range me he check karenge
            int end = numbers.length-1;
            while (start <= end){
                int mid = start + (end - start)/2;
                if(numbers[mid] == x){
                    {
                        return new int[] {i,mid}; // {i+1.mid+1} for 1 based indexing
                    }
                }
                else if(numbers[mid] < x){
                    start = mid+1;
                }
                else {
                    end = mid - 1;
                }
            }
        }
        return new int[] {-1,-1};
    }


    // two pointers approach
    //tc - O(n)
    //sc - O(1)
    public int[] twoSumTwoPointers(int[] numbers, int target){
        int start = 0;
        int end = numbers.length-1;

        while (start < end){
            if(numbers[start] + numbers[end] == target) return new int[] {start+1, end+1};

            else if(numbers[start] + numbers[end] <target){ //sum kam hai target se to start ko increment karte jao
                start++;
            }
            else {
                end--; // sum jyda aa rha hai target se to end ko decrement karte jao
            }
        }
        return new int[] {-1,-1};
    }
