// https://leetcode.com/problems/sort-colors/
// TC-> O(N)
// SC-> O(1)

Approach - Dutch National Flag
(1) Create a low pointer at the beginning of the array and a high pointer at the end of the array.
(2) Create a mid pointer that starts at the beginning of the array and iterates through each element.
(3) If the element at arr[mid] is a 2, then swap arr[mid] and arr[high] and decrease the high pointer by 1.
(4) If the element at arr[mid] is a 0, then swap arr[mid] and arr[low] and increase the low and mid pointers by 1.
(5) If the element at arr[mid] is a 1, don't swap anything and just increase the mid pointer by 1.
(6) stop once the mid pointer passes the high pointer.

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int high = nums.length-1;
        int mid = 0;

        while (mid <= high){
            // nums[mid] == 0, swap nums[low] and  nums[mid]
            if(nums[mid] == 0){
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            }
            // nums[mid] == 2, swap nums[high] and  nums[mid] 
            else if(nums[mid] == 2){
                int temp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = temp;
                high--;
            }
            else {
              // If its 1 don't swap anything and just increase the mid pointer by 1.
                mid++;
            }
        }
    }
}
