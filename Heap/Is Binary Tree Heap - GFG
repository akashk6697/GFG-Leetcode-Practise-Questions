// https://www.geeksforgeeks.org/problems/is-binary-tree-heap/1?page=1&difficulty%5B%5D=1&category%5B%5D=Heap&sortBy=submissions
// TC - O(n) for traversing to make count of nodes and to validate heap property.
// SC - O(h) where h is height of tree. space used by recursive stack.

// count total number of nodes in tree
    private int countNodes(Node tree) {
        if (tree == null) {
            return 0;
        }
        return 1 + countNodes(tree.left) + countNodes(tree.right);
    }

    // check if the binary tree is complete (CBT)
    private boolean isCompleteBinaryTree(Node tree, int index, int totalNodes) {
        if (tree == null) {
            return true;  // An empty tree is also a complete binary tree
        }
        // If index assigned to current node is greater than or equal to the number of nodes, it's not complete
        if (index >= totalNodes) {
            return false;
        }
        // Recursively check the left and right subtrees
        return isCompleteBinaryTree(tree.left, 2 * index + 1, totalNodes) &&
                isCompleteBinaryTree(tree.right, 2 * index + 2, totalNodes);
    }

    // Function to check if the tree satisfies the Max Heap property
    private boolean isMaxHeapProperty(Node tree) {
        if (tree == null) {
            return true;
        }
        // Left child should be less than or equal to the parent node
        if (tree.left != null && tree.data < tree.left.data) {
            return false;
        }
        // Right child should be less than or equal to the parent node
        if (tree.right != null && tree.data < tree.right.data) {
            return false;
        }
        // Recursively check the heap property for left and right subtrees
        return isMaxHeapProperty(tree.left) && isMaxHeapProperty(tree.right);
    }

    public boolean isHeap(Node tree) {
        if (tree == null) {
            return true;  // An empty tree is also a valid max-heap
        }

        // Step 1: Count the total number of nodes
        int totalNodes = countNodes(tree);

        // Step 2: Check if the tree is a complete binary tree
        boolean isComplete = isCompleteBinaryTree(tree, 0, totalNodes);

        // Step 3: Check if the tree satisfies the max heap property
        boolean isMaxHeap = isMaxHeapProperty(tree);

        // Return true if both completeness and max-heap properties hold
        return isComplete && isMaxHeap;
    }
