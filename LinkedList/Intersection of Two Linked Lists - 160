// https://leetcode.com/problems/intersection-of-two-linked-lists/
// Reference - https://www.topcoder.com/thrive/articles/intersection-of-two-linkedlists
// TC-> O(m*n)
// SC-> O(1)
// Brute Force - compare each node of the either list 1 or list 2 in any linked list, to compare need to traverse of linked List using two loop. Run two loop untill list reaches to null.
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode currA = headA;
        ListNode currB = headB;
        ListNode ans = null;
        
        while(currA != null){
            currB = headB;
            
            while(currB != null){
                if(currA == currB){
                    return currA;
                }
                currB = currB.next;
            }
            currA = currA.next;
        }
        return ans;
        
    }
}

// Optimal Approach - take hashset put listA all elements & now check if listB elements found in hashset, if common return intersection node.
// TC-> O(n)
// SC-> O(n)

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> map = new HashSet<>();
        ListNode temp = headA;
        
        while(temp != null){
            // add listA items into hashset
            map.add(temp);
            temp = temp.next;
        }
        temp = headB;
        
        //traverse over listB & compare listB nodes with the elements of hashset, if match return node
        while(temp != null){
            if(map.contains(temp)) {
                return temp;
            }
            temp = temp.next;
        }
        return temp;
    }
}

//Most Optimal Solution - Two Pointers Approach
//Pointer1 will point to the head of L1 and pointer2 will point to the head of L2.
//The solution is that the intersection of the LinkedLists to the end of LinkedLists will be common, as the tail will be common in both LinkedLists.
//So we will keep checking until pointer1 is not equal to pointer2.
// TC-> O(n)
// SC-> O(1)

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if (headA == null || headB == null)
            return null;
        
        ListNode ptr1 = headA;
        ListNode ptr2 = headB;
        
        while(ptr1 != ptr2){
           ptr1 = ptr1 == null ? headB : ptr1.next;
           ptr2 = ptr2 == null ? headA : ptr2.next;  
            
        }
        return ptr1;
    }
}
