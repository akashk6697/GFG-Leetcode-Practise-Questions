// https://leetcode.com/problems/sort-list/
// TC->O(nlogn)
// SC->O(logn)

class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }

        // find middle of the linked list
        ListNode mid = findMiddle(head);

        //find the next node of middle node
        ListNode nextToMid = mid.next;

        //breaking the list into two half
        mid.next = null;

        // Recurring for the left and the right
        // halves obtained.

        ListNode left = sortList(head);
        ListNode right = sortList(nextToMid);

        // Merging the already sorted left
        // and right part of the linked list.

        ListNode result = mergeTwoLists(left,right);

        //return result
        return result;
    }
    
    //merge two sorted list
    static ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        //creating new LinkedList to store ans
        ListNode dummy = new ListNode(-1);
        ListNode curr = dummy;

        while(list1 != null && list2 != null){
            if(list1.val <= list2.val){
                curr.next = list1;
                list1 = list1.next;
            }
            else{
                curr.next = list2;
                list2 = list2.next;
            }
            curr = curr.next;
        }

        if(list1 != null){
            curr.next = list1;

        }
        if(list2 != null){
            curr.next = list2;

        }
        return dummy.next;
    }
    
    // function to find the middle of the linked list
    static ListNode findMiddle(ListNode head){
        if(head == null){
            return head;
        }
        ListNode slowPtr = head;
        ListNode fastPtr = head;

        while (fastPtr.next != null && fastPtr.next.next != null){
            fastPtr = fastPtr.next.next;
            slowPtr = slowPtr.next;
        }
        return slowPtr;
    }
}
