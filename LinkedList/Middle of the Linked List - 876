// https://leetcode.com/problems/middle-of-the-linked-list/
// TC -> O(N)
// SC -> O(1)

Approach - Slow & Fast Ptr , by the time fast will reach end, slow will be in middle.

class Solution {
    public ListNode middleNode(ListNode head) {
        
        ListNode slowPtr = head;
        ListNode fastPtr = head;
        
        while(fastPtr != null && fastPtr.next != null){
            slowPtr = slowPtr.next;
            fastPtr = fastPtr.next.next;
        }
        return slowPtr;
        
    }
}
