// https://leetcode.com/problems/happy-number/
// TC -> O(k * log n)
// SC -> O(k) 
Where:
n: The input number
k: The number of iterations until finding a cycle or reaching 1.

class Solution {
    public boolean isHappy(int n) {
        //set to keep track of resultant num in each iteration
        Set<Integer> seen = new HashSet<>();

        //run a loop until resultant no is not in set
        while( !seen.contains(n)){
            seen.add(n); //add num into set first
            int sum = 0; // declare local var to keep track of sum

            //calculate sum of squares of each digit
            while(n!=0){
                int temp = n % 10;// get the reminder
                sum += temp * temp;//do square
                n = n/10;
            }
            n = sum; // the resultant num will be treated as input num in next iteration
        }
        return n==1;
    }
}

// Optimized Code
// TC -> O(log n)
// SC -> O(1)

class Solution {
    public boolean isHappy(int n) {
        
        int slow = n;
        int fast = n;
        
        do{
            //  move slow number by one iteration
            slow = findSquare(slow);
            fast = findSquare(findSquare(fast));  //  move fast number by two iteration
        }
        while(slow != fast);
            if(slow == 1){
                return true;
            }
        return false;
        
        
    }
    static int findSquare(int n){
        int squareSum = 0;
        
        while(n != 0){
            squareSum += (n % 10) * (n % 10);
            n /= 10;
        }
        return squareSum;
    }
}
